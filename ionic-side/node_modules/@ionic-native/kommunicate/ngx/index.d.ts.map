{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name Kommunicate\n * @description\n * The plugin for the Kommunicate SDK.\n * With the help of this plugin, you can easily add human + bot chat support functionality to you app.\n * Refer to: TODO: insert site link\n * For documentation: TODO: insert link\n *\n * @usage\n * ```typescript\n * import { Kommunicate } from '@ionic-native/Kommunicate';\n *\n * constructor(private kommunicate: Kommunicate) { }\n * //also add [..., Kommunicate, ... ] inside the providers array, if required\n *\n * var kmUser = {\n *    userId : 'randomstring',\n *    authenticationTypeId : 1\n * };\n *\n * this.kommunicate.login(kmUser)\n *   .then((res: any) => console.log(\"Sucessfully logged in.\" + res))\n *   .catch((error: any) => console.error(\"Error logging in.\" + error));\n *\n * var conversationObject = {\n *    isUnique : false\n * };\n *\n * this.kommunicate.conversationBuilder(converationObject)\n *   .then((clientChannelKey: any) => console.log(\"Kommunicate create conversation successful the clientChannelKey is : \" + clientChannelKey))\n *   .catch((error: any) => console.error(\"Error creating conversation.\" + error));\n *\n * ```\n */\nexport declare class Kommunicate extends IonicNativePlugin {\n    /**\n     * Login the user with the details passed in\n     * Creates a new user with the details provided there is no existing user\n     *\n     * var kmUser = {\n     *    'userId' : 'userId',   //Replace it with the userId of the logged in user\n     *    'password' : 'password',  //replace with password\n     *    'authenticationTypeId' : 1,\n     *    'imageLink' : <image-link-for-user>\n     *    'applicationId' : '<APP_ID>',  //replace this with your APP_ID from Applozic Dashboard\n     *    'deviceApnsType' : 0    //Set 0 for Development and 1 for Distribution (Release)\n     * };\n     *\n     * @param kmUser {any} the user details\n     * @return {Promise<any>} Returns a promise\n     */\n    login(kmUser: any): Promise<any>;\n    /**\n     * Register for push notification\n     *\n     * @return {Promise<any>} Returns a promise\n     */\n    registerPushNotification(): Promise<any>;\n    /**\n     * Check if any user is logged in or not\n     *\n     * @return {Promise<any>} Returns a promise\n     */\n    isLoggedIn(): Promise<any>;\n    /**\n     * Update the token for push notifications\n     *\n     * @param token {string} the user details\n     * @return {Promise<any>} Returns a promise\n     */\n    updatePushNotificationToken(token: string): Promise<any>;\n    /**\n     * Launch the conversation screen (it contains all the existing conversations)\n     *\n     * @return {Promise<any>} Returns a promise\n     */\n    launchConversation(): Promise<any>;\n    /**\n     * Launch the conversation identified by the given channel(conversation) key\n     *\n     * let convObj = {\n     *   'clientChannelKey' : clientChannelKey, //pass the clientChannelKey here\n     *   'takeOrder' : true //skip chat list on back press, pass false if you want to show chat list on back press\n     * };\n     *\n     * @param conversationObject {any} the channel key and other information\n     * @return {Promise<any>} Returns a promise\n     */\n    launchParticularConversation(conversationObject: any): Promise<any>;\n    /**\n     * Start a new conversation, details about the conversation to be passed as parameters\n     *\n     * @deprecated\n     * @param converationParams {any} the user details\n     * @return {Promise<any>} Returns a promise\n     */\n    startNewConversation(conversationParams: any): Promise<any>;\n    /**\n     * Process push notifications\n     *\n     * @param data {any} the user details\n     * @return {boolean} Returns true/false\n     */\n    processPushNotification(data: any): boolean;\n    /**\n     * Logout the current user\n     *\n     * @return {Promise<any>} Returns a promise\n     */\n    logout(): Promise<any>;\n    /**\n     * Start a single chat (conversation)\n     *\n     * @deprecated\n     * @param data {any} the user details\n     * @return {Promise<any>} Returns a promise\n     */\n    startSingleChat(data: any): Promise<any>;\n    /**\n     * Launches a conversation with the properties passed in the conversation param\n     *\n     * var conversationObject = {\n     *   'isUnique' : false,\n     *   'agentIds':['<AGENT_ID>'],  //List of agentIds. AGENT_ID is the emailID used to signup on Kommunicate\n     *   'botIds': ['<BOT_ID>']  //List of botIds. Go to Manage Bots(https://dashboard.kommunicate.io/bots/manage-bots) -> Copy botID\n     * };\n     *\n     * @param conversationObject {any} the user details\n     * @return {Promise<any>} Returns a promise\n     */\n    conversationBuilder(converationObject: any): Promise<any>;\n}\n"]}