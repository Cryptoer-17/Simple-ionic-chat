import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var Kommunicate = /** @class */ (function (_super) {
    __extends(Kommunicate, _super);
    function Kommunicate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Kommunicate.prototype.login = function (kmUser) { return cordova(this, "login", {}, arguments); };
    Kommunicate.prototype.registerPushNotification = function () { return cordova(this, "registerPushNotification", {}, arguments); };
    Kommunicate.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    Kommunicate.prototype.updatePushNotificationToken = function (token) { return cordova(this, "updatePushNotificationToken", {}, arguments); };
    Kommunicate.prototype.launchConversation = function () { return cordova(this, "launchConversation", {}, arguments); };
    Kommunicate.prototype.launchParticularConversation = function (conversationObject) { return cordova(this, "launchParticularConversation", {}, arguments); };
    Kommunicate.prototype.startNewConversation = function (conversationParams) { return cordova(this, "startNewConversation", {}, arguments); };
    Kommunicate.prototype.processPushNotification = function (data) { return cordova(this, "processPushNotification", { "sync": true }, arguments); };
    Kommunicate.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    Kommunicate.prototype.startSingleChat = function (data) { return cordova(this, "startSingleChat", {}, arguments); };
    Kommunicate.prototype.conversationBuilder = function (converationObject) { return cordova(this, "conversationBuilder", {}, arguments); };
    Kommunicate.pluginName = "Kommunicate";
    Kommunicate.plugin = "kommunicate-cordova-plugin";
    Kommunicate.pluginRef = "kommunicate";
    Kommunicate.repo = "https://github.com/Kommunicate-io/Kommunicate-Cordova-Ionic-PhoneGap-Chat-Plugin";
    Kommunicate.platforms = ["Android", "Browser", "iOS"];
Kommunicate.ɵfac = function Kommunicate_Factory(t) { return ɵKommunicate_BaseFactory(t || Kommunicate); };
Kommunicate.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Kommunicate, factory: function (t) { return Kommunicate.ɵfac(t); } });
var ɵKommunicate_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Kommunicate);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Kommunicate, [{
        type: Injectable
    }], null, null); })();
    return Kommunicate;
}(IonicNativePlugin));
export { Kommunicate };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,